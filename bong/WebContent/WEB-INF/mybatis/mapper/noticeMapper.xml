<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="notice">
	
	<insert id="insertNotice" parameterType="com.bong.notice.Notice">
		INSERT INTO notice (noticeIdx, userIdx,subject, content, saveFilename, originalFilename)
			VALUES(notice_seq.NEXTVAL, #{userIdx}, #{subject}
						,#{content}, #{saveFilename, jdbcType=VARCHAR}, #{originalFilename,jdbcType=VARCHAR})
	</insert>
	
	
	<sql id="where-list">
	  <if test="searchKey=='userName'">
	      userName=#{searchValue}
	  </if>
	  <if test="searchKey=='subject'">
	      INSTR(subject, #{searchValue}) &gt; 0
	  </if>
	  <if test="searchKey=='content'">
	      DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0 
	  </if>
	  <if test="searchKey=='created'">
	      TO_CHAR(b.created, 'YYYY-MM-DD') = #{searchValue}
	      OR TO_CHAR(b.created, 'YYYYMMDD') = #{searchValue}
	  </if>
	</sql>
	
	<!-- 글개수 -->
	<select id="dataCount" parameterType="map"
	            resultType="Integer">
	         SELECT NVL(COUNT(*), 0) FROM notice n
	        JOIN memberInfo m
	        ON n.userIdx=m.userIdx
	     <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 글리스트 -->
	<select id="listNotice" parameterType="map"
	            resultType="com.bong.notice.Notice">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT noticeIdx, m.userIdx, m.userName, subject
			           ,TO_CHAR(n.created, 'YYYY-MM-DD') created
					   ,hitCount, n.saveFilename
			        FROM notice n JOIN memberInfo m ON n.userIdx=m.userIdx
                    <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
	                </where>
	                ORDER BY noticeIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 메인용 글리스트 -->
	<select id="listNoticeSmall" parameterType="map"
	            resultType="com.bong.notice.Notice">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT noticeIdx, subject
			        FROM notice
	                ORDER BY noticeIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 글보기 -->
	<select id="readNotice" resultType="com.bong.notice.Notice" parameterType="map">
		SELECT n.noticeIdx, m.userIdx, userName, subject, content
				   ,hitCount, n.created,  n.saveFilename, n.originalFilename
		FROM notice n JOIN memberInfo m ON n.userIdx=m.userIdx
		WHERE noticeIdx = #{num}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="map">
		UPDATE notice SET hitCount=hitCount+1 WHERE noticeIdx = #{num}
	</update>
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadNotice" resultType="com.bong.notice.Notice" 
				parameterType="map">
		SELECT tb.* FROM (
			SELECT noticeIdx, subject
			      FROM notice n
			      JOIN memberInfo m ON n.userIdx=m.userIdx
                    <where>
                         <if test="searchValue != null and searchValue != '' ">
			                  <include refid="where-list"/>
		                 </if>
		               <![CDATA[
		                 AND (noticeIdx > #{num})
		                 ]]>
	                </where>
				ORDER BY noticeIdx ASC
			) tb WHERE ROWNUM=1
	</select>
	
	<!-- 다음글 -->
	<select id="nextReadNotice" resultType="com.bong.notice.Notice" 
				parameterType="map">
		SELECT tb.* FROM (
			SELECT noticeIdx, subject
			      FROM notice n
			      JOIN memberInfo m ON n.userIdx=m.userIdx
                    <where>
                         <if test="searchValue != null and searchValue != '' ">
			                  <include refid="where-list"/>
		                 </if>
		               <![CDATA[
		                 AND (noticeIdx < #{num})
		                 ]]>
	                </where>
				ORDER BY noticeIdx DESC
			) tb WHERE ROWNUM=1
	</select>
	
	<!-- 수정 -->
     <update id="updateNotice" parameterType="com.bong.notice.Notice">
         UPDATE notice SET subject=#{subject}, content=#{content}
                    ,saveFilename=#{saveFilename, jdbcType=VARCHAR}
                    ,originalFilename=#{originalFilename, jdbcType=VARCHAR}
                    WHERE noticeIdx = #{noticeIdx}
      </update>
	
	<!-- 삭제 -->
      <delete id="deleteNotice" parameterType="map">
           DELETE FROM notice WHERE noticeIdx = #{num}
      </delete>
	
	<!-- 회원 탈퇴시 게시물 삭제 ................. -->
	<select id="listNoticeId" parameterType="String" resultType="com.bong.notice.Notice">
	   SELECT noticeIdx, m.userIdx, userName, subject, content
				   ,hitCount, n.created,  n.saveFilename, n.originalFilename
		FROM notice n JOIN memberinfo m ON n.userIdx=m.userIdx
		WHERE m.userIdx = #{userIdx}
	</select>
    <delete id="deleteNoticeId" parameterType="String">
         DELETE FROM notice WHERE userIdx = #{userIdx}
    </delete>
    
	<select id="CNRSeq" resultType="Integer">
		SELECT notice_reply_seq.NEXTVAL FROM DUAL
	</select>
	
	<!-- 댓글 처리................. -->
	<insert id="insertNoticeReply" parameterType="com.bong.notice.Reply">
	INSERT INTO notice_reply(CNRIDX ,NOTICEIDX, userIdx, content, answer)
	   VALUES (#{replyNum}, #{num},#{userIdx},
	        #{content}, #{answer})
	</insert>
	
	<select id="replyDataCount" resultType="Integer" 
	           parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM notice_reply WHERE noticeIdx=#{num} AND answer=0
	</select>
	
	<select id="listReply" resultType="com.bong.notice.Reply" 
	          parameterType="map">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
		        SELECT tbreply.CNRIDX as replyNum, noticeIdx as num, userName 
		                    ,content, created, tbreply.answer
		                    ,NVL(answerCount, 0) answerCount
		        FROM
		        (
				      (
					     SELECT cnridx, r.clubNoticeIdx, r.userIdx,
               userName, r.content, r.created, answer
					        FROM notice_reply r 
			                JOIN notice n ON r.noticeIdx=n.noticeIdx
			                JOIN memberinfo m ON r.userIdx=m.userIdx
			                WHERE r.noticeIdx=#{num} AND answer=0
			           ) tbreply
			           LEFT OUTER JOIN
			           (
			                SELECT answer, COUNT(*) answerCount
                                 FROM notice_reply GROUP BY answer
			           ) tbanswer ON tbreply.CNRIDX = tbanswer.answer
	           )
	           ORDER BY replyNum DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 댓글별 답글 리스트 -->
	<select id="listReplyAnswer" resultType="com.bong.notice.Reply" 
	          parameterType="Integer">
     SELECT CNRIDX AS replyNum, noticeIdx AS num, tbreply.userIdx, userName, content, created, answer
	          FROM notice_reply tbreply 
	          JOIN memberInfo m ON tbreply.userIdx=m.userIdx
              WHERE answer=#{answer}
              ORDER BY replyNum DESC
	</select>
	
	<!-- 댓글별 답글 개수 -->
	<select id="replyCountAnswer" resultType="Integer" 
	           parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM notice_reply WHERE answer=#{answer}
	</select>
	
	<delete id="deleteReply" parameterType="map">
	DELETE notice_reply WHERE
	    <if test="mode == 'num' ">
			 noticeIdx=#{num}
		</if>
	    <if test="mode == 'reply' ">
			 CNRIDX IN 
               (SELECT CNRIDX FROM notice_reply START WITH  CNRIDX = #{replyNum}
	            CONNECT BY PRIOR CNRIDX = answer)
		</if>
	    <if test="mode == 'answer' ">
			 CNRIDX=#{replyNum}
		</if>
	</delete>
	
</mapper>