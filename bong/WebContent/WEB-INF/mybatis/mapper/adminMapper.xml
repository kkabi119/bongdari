<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<!-- 검색 시 유저 이름 또는 아이디로 검색 -->
	<sql id="where-list">
	  <if test="searchKey=='userName'">
	      userName=#{searchValue}
	  </if>
	  <if test="searchKey=='userId'">
	      userId=#{userId}
	  </if>
	  <if test="searchKey=='clubName'">
	      clubName=#{clubName}
	  </if>
	</sql>
	
	
	<!-- 회원 수 -->
	<select id="memberCount" parameterType="map"
	            resultType="Integer">
	  SELECT COUNT(*) FROM memberInfo
	     <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 회원 리스트 -->
	<select id="memberList" parameterType="map"
	            resultType="com.bong.admin.Member">
		SELECT * FROM (
		    SELECT ROWNUM rNum, tb.* FROM (
			     SELECT ci.userIdx, userId, userTel, ci.userName, userGender, userLevel,
           NVL(userNoshow, 0) userNoshow, userScore,
           TO_CHAR(created_date, 'YYYY-MM-DD') created_date
           ,TO_CHAR(last_Login, 'YYYY-MM-DD') last_Login
			        FROM checkId ci
              		JOIN memberinfo mi ON ci.userIdx=mi.userIdx
                    <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
	                </where>
	                ORDER BY userIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 클럽 수 -->
	<select id="clubCount" parameterType="map"
	            resultType="Integer">
	  SELECT COUNT(*) FROM clubInfo
	     <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 동아리 리스트 -->
	<select id="listClub" resultType="com.bong.admin.Club" 
	          parameterType="map">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
		        SELECT tot.*, ct2.subject as lSubject, ct1.subject as sSubject  FROM
     					 (SELECT clubName, TO_CHAR(clubBirth, 'YYYY-MM-DD') clubBirth, SUBSTR(clubAddr, 1, 2) as clubAddr, userId, closed, introduce, themeNum, ci.clubIdx,               
			          	NVL(cvl.total_hours, 0) total_hours, NVL(cvl.total_NoShow, 0) total_NoShow, NVL(jc.member, 0) member FROM clubinfo ci
			         	LEFT OUTER JOIN (SELECT SUM(clubhours) total_hours, SUM(clubnoshow) total_noshow, clubIdx FROM clubVolList
						GROUP BY clubIdx) cvl ON ci.clubIdx=cvl.clubIdx
          				LEFT OUTER JOIN (SELECT COUNT(userIdx) member, clubIdx FROM joinclub
						GROUP BY clubIdx) jc ON ci.clubIdx=jc.clubIdx) tot
			            LEFT OUTER JOIN theme ct1 ON tot.themenum=ct1.themenum
			            LEFT OUTER JOIN theme ct2 ON ct1.parent=ct2.themenum
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	<!-- 수요처 수 -->
	<select id="demanderCount" parameterType="map"
	            resultType="Integer">
	  SELECT COUNT(*) FROM serviceinfo si
      JOIN checkId ci ON si.userIdx = ci.userIdx
      WHERE si.enabled=#{switching}
	     <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 수요처 리스트 -->
	<select id="listDemander" resultType="com.bong.admin.Demander"
			parameterType="map">
		SELECT * FROM(
			SELECT ROWNUM rnum, tb.* FROM(
					SELECT si.serviceIdx, ci.userId, si.serviceName, TO_CHAR(si.serviceBirth, 'YYYY-MM-DD') serviceBirth,
				       si.serviceTel,  SUBSTR(si.serviceAddr, 1, 2) as serviceAddr, si.serviceEmail, ci.isService,
				       t2.subject lSubject, t1.subject sSubject
				       FROM checkId ci
               		   JOIN serviceInfo si ON ci.userIdx=si.userIdx
				       LEFT OUTER JOIN theme t1 ON si.themeNum=t1.themeNum
				       LEFT OUTER JOIN theme t2 ON t1.parent=t2.themeNum
				       WHERE si.enabled=#{switching}
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>		
	</select>
	
	<!-- 수요처 승인요청 상세 리스트-->
	<select id="demanderArticle" resultType="com.bong.admin.Demander"
			parameterType="Integer">
					SELECT serviceIdx, userId as serviceId, serviceName, serviceEmail, TO_CHAR(serviceBirth, 'YYYY-MM-DD') serviceBirth, serviceTel, serviceIntro, 
					SUBSTR(serviceAddr, 1, 2) serviceAddr,
			        serviceImg, tt.lSubject, tt.sSubject, TO_CHAR(created_date, 'YYYY-MM-DD') created_date FROM serviceInfo si
					LEFT OUTER JOIN checkId ci ON ci.userIdx=si.userIdx
					LEFT OUTER JOIN (SELECT t1.themeNum, t2.subject as lSubject, t1.subject as sSubject FROM theme t1
			        LEFT OUTER JOIN theme t2 ON t1.parent=t2.themeNum) tt ON si.themeNum=tt.themeNum
			        WHERE serviceIdx = #{serviceIdx}
	
	</select>
	
	<select id="clubArticle" parameterType="Integer" resultType="com.bong.admin.Club">
		SELECT tot.*, ct2.subject as lSubject, ct1.subject as sSubject  FROM
     					 (SELECT clubName, TO_CHAR(clubBirth, 'YYYY-MM-DD') clubBirth, clubAddr, userId, closed, introduce, themeNum, ci.clubIdx, photoFileName as img,               
			          	NVL(cvl.total_hours, 0) total_hours, NVL(cvl.total_NoShow, 0) total_NoShow, NVL(jc.member, 0) member FROM clubinfo ci
			         	LEFT OUTER JOIN (SELECT SUM(clubhours) total_hours, SUM(clubnoshow) total_noshow, clubIdx FROM clubVolList
						GROUP BY clubIdx) cvl ON ci.clubIdx=cvl.clubIdx
          				LEFT OUTER JOIN (SELECT COUNT(userIdx) member, clubIdx FROM joinclub
						GROUP BY clubIdx) jc ON ci.clubIdx=jc.clubIdx) tot
			            LEFT OUTER JOIN theme ct1 ON tot.themenum=ct1.themenum
			            LEFT OUTER JOIN theme ct2 ON ct1.parent=ct2.themenum
                  WHERE clubIdx = #{clubIdx}
	</select>
	
	<!-- 수요처 동적쿼리로 테이블 생성해주기 -->
	
	<!-- 수요처 승인시 enabled를 1로 바꿔준다. -->
	<update id="approvalUpdate" parameterType="Integer">
		UPDATE serviceInfo SET enabled=1 WHERE serviceIdx=#{serviceIdx}
	</update>
	
	<update id="createServiceNotice" parameterType="Integer">
	CREATE TABLE service_NOTICE_${value} (
		serviceNoticeIdx	NUMBER
		,userIdx 	       	NUMBER    	NOT NULL
		,serviceIdx       	NUMBER    	NOT NULL
		,subject 	       	VARCHAR2(255) NOT NULL
		,content           	CLOB         	NOT NULL
		,hitCount          	NUMBER   	DEFAULT 0
		,created 	       	DATE          	DEFAULT SYSDATE
		,modified          	DATE         	DEFAULT SYSDATE
		,saveFilename   	VARCHAR2(255)
		,originalFilename   VARCHAR2(255)
		,CONSTRAINT pk_service_notice_${value} PRIMARY KEY(serviceNoticeIdx)
		,CONSTRAINT fk_servicenoti_urIdx_${value} FOREIGN KEY(userIdx)
             REFERENCES checkId(userIdx)
		,CONSTRAINT fk_servicenoti_srIdx_${value} FOREIGN KEY(serviceIdx)
             REFERENCES serviceInfo(serviceIdx)
		)
	</update>
	
	<update id="createServiceNoticeReply" parameterType="Integer">
	CREATE TABLE service_notice_reply_${value}(
  	SNRIdx NUMBER
  	,serviceNoticeIdx  NUMBER NOT NULL
  	,content  CLOB NOT NULL
  	,created  DATE DEFAULT SYSDATE
  	,answer  NUMBER NOT NULL
  	,userIdx NUMBER NOT NULL
  	,CONSTRAINT pk_sNoticeR_${value} PRIMARY KEY(SNRIdx)
  	,CONSTRAINT fk_sNoticeR_srNoti_${value} FOREIGN KEY(serviceNoticeIdx)
              REFERENCES service_notice_${value}(serviceNoticeIdx)
    ,CONSTRAINT fk_sNoticeR_userIdx_${value} FOREIGN KEY(userIdx)
    		  REFERENCES checkId(userIdx)
	)
	</update>
	
	<update id="createServiceReview" parameterType="Integer">
	CREATE TABLE service_review_${value}(
  	servicereviewidx NUMBER NOT NULL
  	, subject VARCHAR2(100) NOT NULL
  	,CONTENT CLOB NOT NULL
  	,created DATE DEFAULT SYSDATE
  	,hitcount NUMBER DEFAULT 0
  	,serviceidx NUMBER NOT NULL
  	,useridx NUMBER NOT NULL
  	,PRIMARY KEY(servicereviewidx)
  	,CONSTRAINT fk_serv_rev_sidx_${value} FOREIGN KEY(serviceidx)
  	REFERENCES serviceinfo(serviceidx) ON DELETE CASCADE
  	,CONSTRAINT fk_serv_rev_useridx_${value} FOREIGN KEY(useridx)
  	REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceReviewLike" parameterType="Integer">
	CREATE TABLE service_review_like_${value}(
  	serviceReviewIdx NUMBER NOT NULL
  	,useridx NUMBER NOT NULL
  	,PRIMARY KEY(servicereviewidx,useridx)
  	,CONSTRAINT fk_ser_rl_srlidx_${value} FOREIGN KEY(servicereviewidx)
  	REFERENCES service_review_${value}(servicereviewidx) ON DELETE CASCADE
  	,CONSTRAINT fk_ser_rl_useridx_${value} FOREIGN KEY(useridx)
  	REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceReviewReply" parameterType="Integer">
	CREATE TABLE service_review_reply_${value}(
  	SRRIdx NUMBER NOT NULL
  	,CONTENT CLOB NOT NULL
  	,created DATE DEFAULT SYSDATE
  	,answer     	NUMBER NOT NULL  
  	,servicereviewidx NUMBER NOT NULL
  	,useridx NUMBER NOT NULL
  	,PRIMARY KEY(srridx)
  	,CONSTRAINT fk_serv_rr_sridx_${value} FOREIGN KEY(servicereviewidx)
  	REFERENCES service_review_${value}(servicereviewidx) ON DELETE CASCADE
  	,CONSTRAINT fk_serv_rr_useridx_${value} FOREIGN KEY(useridx)
  	REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceReviewFile" parameterType="Integer">
	CREATE TABLE service_review_file_${value}(
	serviceFileidx NUMBER NOT NULL
	,savefilename  VARCHAR2(255)
	,originalfilename VARCHAR2(255)
	,servicereviewidx NUMBER NOT NULL
 	,PRIMARY KEY(servicefileidx)
 	,CONSTRAINT fk_serv_rf_revidx_${value} FOREIGN KEY(servicereviewidx)
  	REFERENCES service_review_${value}(servicereviewidx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceReviewReplyLike" parameterType="Integer">
	CREATE TABLE serv_rev_reply_like_${value}(
  	SRRIdx NUMBER NOT NULL
  	,useridx NUMBER NOT NULL
  	, PRIMARY KEY(srridx,useridx)
  	,CONSTRAINT fk_ser_rrl_srridx_${value} FOREIGN KEY(srridx)
  	REFERENCES service_review_reply_${value}(srridx) ON DELETE CASCADE
  	,CONSTRAINT fk_ser_rrl_useridx_${value} FOREIGN KEY(useridx)
  	REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceGuest" parameterType="Integer">
	CREATE TABLE service_guest_${value}(
  	sguestidx NUMBER NOT NULL
  	,CONTENT CLOB NOT NULL
  	,created DATE DEFAULT SYSDATE
  	,useridx NUMBER NOT NULL
	,PRIMARY KEY(sguestidx)
  	,CONSTRAINT fk_serv_guest_useridx_${value} FOREIGN KEY(useridx)
    REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
	<update id="createServiceQnA" parameterType="Integer">
	CREATE TABLE service_qna_${value}(
  	sqnaidx NUMBER NOT NULL
  	,subject VARCHAR2(100) NOT NULL
  	,CONTENT CLOB NOT NULL
  	,created DATE DEFAULT SYSDATE
  	,answer number not null
  	,useridx NUMBER NOT NULL
  	,hitcount NUMBER DEFAULT 0
	,groupNum NUMBER NOT NULL
	,quserIdx NUMBER
  	,PRIMARY KEY(sqnaidx)
  	,CONSTRAINT fk_serv_qna_useridx_${value} FOREIGN KEY(useridx)
  	REFERENCES checkId(useridx) ON DELETE CASCADE
	)
	</update>
	
</mapper>