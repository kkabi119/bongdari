<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club">
	<!-- 동아리 카테고리 대분류 -->
	<select id="listClubThemeGroup" resultType="com.bong.club.ClubTheme">
	    SELECT themeNum, subject FROM theme
	          WHERE parent IS NULL
	          ORDER BY themeNum ASC
	</select>
	
	<!-- 동아리 카테고리 중분류 -->
	<select id="listClubTheme" parameterType="Integer" resultType="com.bong.club.ClubTheme">
	    SELECT themeNum, subject, parent FROM theme
	          WHERE parent = #{groupNum}
	          ORDER BY themeNum ASC
	</select>
	
	<!-- 동아리 카테고리를 계층적으로 가져오기 -->
	<select id="listClubThemeAll" resultType="com.bong.club.ClubTheme">
	    SELECT themeNum, subject, NVL(parent, 0) parent
	    FROM
	    (
	         SELECT 0 themeNum, null subject, null parent
	            FROM DUAL
	         UNION ALL
	         SELECT themeNum, subject, NVL(parent, 0) parent
  	            FROM theme
	    )
	    WHERE themeNum!=0
	    START WITH themeNum=0
	    CONNECT BY PRIOR themeNum=parent	
	</select>
	
	<select id="readSeqVal" resultType="integer">
		 SELECT club_seq.NEXTVAL FROM DUAL
	</select>
	
	<!-- 생성되는 동아리 정보 저장 -->
	<select id="clubseq" resultType="integer">
	    SELECT club_seq.NEXTVAL FROM DUAL
	</select>
	
	<insert id="insertClub" parameterType="com.bong.club.ClubInfo">
		INSERT INTO club(clubIdx, isclub) VALUES(#{clubSeq}, 1)
	</insert>
	
	<insert id="insertClubInfo" parameterType="com.bong.club.ClubInfo">
	    INSERT INTO clubInfo(clubIdx, userId, themeNum, clubname, introduce, closed, city, photoFilename)
	      VALUES (#{clubSeq}, #{userId}, #{themeNum}, 
	                #{clubname}, #{introduce}, 1,#{city}, #{photoFilename, jdbcType=VARCHAR})
	</insert>
	
	<insert id="insertJoinClub" parameterType="com.bong.club.ClubInfo">
	    INSERT INTO JoinClub(joinclubIdx, authority, clubIdx, useridx)
	      VALUES (joinclub_seq.NEXTVAL, '관리자', #{clubSeq},#{userIdx})
	</insert>
	
	<!-- 동아리 정보 수정 -->
	<update id="updateClubInfo" parameterType="com.bong.club.ClubInfo">
	    UPDATE ClubInfo SET themeNum=#{themeNum}, clubname=#{clubname}, introduce=#{introduce}, city=#{city}, photoFilename=#{photoFilename}
	    WHERE clubIdx=#{clubSeq}
	</update>
	
	<!-- 동아리 정보 삭제 -->
	<delete id="deleteClubInfo" parameterType="Integer">
	    DELETE FROM ClubInfo WHERE clubIdx=#{clubSeq}
	</delete>

	<!-- 동아리 전체 리스트 -->
	<sql id="Club-where">
	   INSTR(g.subject, #{query}) &gt; 0 OR
	   INSTR(c.subject, #{query}) &gt; 0 OR
	   userId = #{query} OR
	   nickName = #{query} OR
	   INSTR(title, #{query}) &gt; 0 OR
	   INSTR(introduce, #{query}) &gt; 0
	</sql>
	
	<select id="dataCountClub" parameterType="map" resultType="Integer">
	    SELECT NVL(COUNT(*), 0) 
               FROM ClubInfo b
	           JOIN ClubProfile p ON b.ClubSeq = p.ClubSeq
	           JOIN theme c ON b.themeNum=c.themeNum
               JOIN (
                         SELECT themeNum, subject FROM theme
                         WHERE parent IS NULL
                       ) g ON c.parent = g.themeNum
	     <where>
	     	<if test="query!=null and query!='' ">
	     	    <include refid="Club-where"/>
	     	</if>
	     	<if test="themeNum!=0 ">
	     	    AND b.themeNum = #{themeNum}
	     	</if>
	     	<if test="user=='general' ">	     	
	     	    AND closed=0
	     	 </if>
	     </where>
	</select>
	
	<select id="listClub" parameterType="map" resultType="com.bong.club.ClubInfo">
 		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT b.ClubSeq, userId, nickName, b.themeNum, c.parent groupNum
			            ,title, introduce, visitorCount, closed, created, userName
	                    ,c.subject, g.subject groupSubject
      	           FROM ClubInfo b
	               JOIN ClubProfile p ON b.ClubSeq = p.ClubSeq
	               JOIN theme c ON b.themeNum=c.themeNum
	               JOIN (
	                         SELECT themeNum, subject FROM theme
	                         WHERE parent IS NULL
	                       ) g ON c.parent = g.themeNum
	               <where>
	     	          <if test="query!=null and query!='' ">
	     	               <include refid="Club-where"/>
	     	          </if>
	     	          <if test="themeNum!=0 ">
	     	               AND b.themeNum = #{themeNum}
	     	          </if>
	     	          <if test="user=='general' ">	     	
	     	              AND closed=0
	     	          </if>
	               </where>
	                ORDER BY visitorCount DESC, created DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
 	</select>
	
	<!-- 내 동아리의 전체 정보 -->
	<select id="readClubInfo" parameterType="map" resultType="com.bong.club.ClubInfo">
	    SELECT clubidx AS clubSeq, userId, c.parent groupNum ,clubname, introduce, clubBirth, 
			closed, c.subject, g.subject groupSubject, photoFilename 
			FROM ClubInfo b 
			JOIN theme c ON b.themeNum=c.themeNum 
			JOIN ( SELECT themeNum, subject FROM theme WHERE parent IS NULL ) g ON c.parent = g.themeNum  
		WHERE ${field}=#{field_value}
	</select>
	
	<select id="readClubInfoSmall" parameterType="map" resultType="com.bong.club.ClubInfo">
		SELECT clubidx AS clubSeq, userId, c.parent groupNum ,clubname, introduce, clubBirth, city,
		
			closed, c.subject, g.subject groupSubject, photoFilename, c.themeNum, c.parent groupNum 
			FROM ClubInfo b 
			JOIN theme c ON b.themeNum=c.themeNum 
			JOIN ( SELECT themeNum, subject FROM theme WHERE parent IS NULL ) g ON c.parent = g.themeNum
			WHERE clubIdx=${clubSeq}  
	</select>
	
	<select id="readClubInfoSession" parameterType="map" resultType="String">
		SELECT clubIdx FROM CLUBINFO WHERE userId=#{userId}
	</select>
	
	<!-- 개인 동아리의 메인 화면에 출력할 정보 -->
	<select id="readClubInfoHome" parameterType="Long" resultType="com.bong.club.ClubInfo">
	    SELECT b.ClubSeq, userId, nickName, b.themeNum, c.parent groupNum
	                ,title, introduce, visitorCount, created, photoFilename
	                ,c.subject, g.subject groupSubject
	           FROM ClubInfo b
	           JOIN ClubProfile p ON b.ClubSeq = p.ClubSeq
	           JOIN theme c ON b.themeNum=c.themeNum
               JOIN (
                         SELECT themeNum, subject FROM theme
                         WHERE parent IS NULL
                       ) g ON c.parent = g.themeNum
	           WHERE b.ClubSeq=#{ClubSeq}
	</select>
	
	<!-- 테이블 생성 및 삭제  -->
	
	<!-- 동아리 공지사항 게시판  -->
	<update id="createClubNotice" parameterType="Integer">
		create table club_notice_${value}(
			CLUBNOTICEIDX     NUMBER NOT NULL
			,USERIDX          NUMBER NOT NULL
			,CLUBIDX          NUMBER NOT NULL 
			,SUBJECT          VARCHAR2(255) NOT NULL 
			,CONTENT          CLOB NOT NULL 
			,HITCOUNT                  NUMBER DEFAULT 0       
			,CREATED                   DATE DEFAULT SYSDATE          
			,MODIFIED                  DATE            
			,SAVEFILENAME              VARCHAR2(255) 
			,ORIGINALFILENAME          VARCHAR2(255)
			,CONSTRAINT pk_club_notice_${value} PRIMARY KEY(clubNoticeIdx)
			,CONSTRAINT fk_club_Notice_userIdx_${value} FOREIGN KEY(userIdx)
			  REFERENCES memberInfo(userIdx) ON DELETE CASCADE
			,CONSTRAINT fk_club_Notice_clubIdx_${value} FOREIGN KEY(clubIdx) 
	 REFERENCES clubInfo(clubIdx) ON DELETE CASCADE
)
	</update>
	
	<update id="dropClubNotice" parameterType="Integer">
		DROP TABLE club_notice_${value} PURGE
	</update>
	
	<update id="createClubNoticeReply" parameterType="Integer">
		create table club_notice_reply_${value}(
			CNRIDX    	NUMBER NOT NULL 
			,USERIDX   	NUMBER NOT NULL 
			,CLUBNOTICEIDX NUMBER NOT NULL 
			,CONTENT   	CLOB NOT NULL   
			,CREATED    DATE  DEFAULT SYSDATE
			,ANSWER    	NUMBER NOT NULL
			,CONSTRAINT pk_club_notice_reply_${value} PRIMARY KEY(cnrIdx)
			,CONSTRAINT fk_club_Noticer_userIdx_${value} FOREIGN KEY(userIdx)
			  REFERENCES memberInfo(userIdx) ON DELETE CASCADE
			,CONSTRAINT fk_clubNoticeIdx_${value} FOREIGN KEY(CLUBNOTICEIDX)
	REFERENCES club_notice_${value} (CLUBNOTICEIDX) ON DELETE CASCADE
)
	</update>
	
	<update id="dropClubNoticeReply" parameterType="Integer">
		DROP TABLE club_notice_reply_${value} PURGE
	</update>
	
	<!-- 동아리 자유게시판 -->
	<update id="createClubFree" parameterType="Integer">
		CREATE TABLE club_free_${value}(
		    CLUBFREEIDX  NUMBER NOT NULL 
		    ,USERIDX  NUMBER  NOT NULL
		    ,CLUBIDX  NUMBER NOT NULL        
		    ,SUBJECT  VARCHAR2(255) NOT NULL 
		    ,CONTENT  CLOB NOT NULL         
		    ,HITCOUNT NUMBER DEFAULT 0      
		    ,CREATED  DATE DEFAULT SYSDATE         
		    ,MODIFIED  DATE DEFAULT SYSDATE
		    ,SAVEFILENAME		VARCHAR2(255)
    		,ORIGINALFILENAME 	VARCHAR2(255)    
		    ,CONSTRAINT pk_club_free_${value} PRIMARY KEY(clubFreeIdx)
		    ,CONSTRAINT fk_club_Free_userIdx_${value} FOREIGN KEY(userIdx)
		      REFERENCES memberInfo(userIdx) ON DELETE CASCADE
		    ,CONSTRAINT fk_club_Free_clubIdx_${value} FOREIGN KEY(clubIdx) 
     	 REFERENCES clubInfo(clubIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubFree" parameterType="Integer">
		DROP TABLE club_free_${value} PURGE
	</update>
	
	
	
	<update id="createClubFreeReply" parameterType="Integer">
		create table club_free_reply_${value}(
			CFRIDX  	 NUMBER NOT NULL
			,USERIDX 	 NUMBER NOT NULL
			,CLUBFREEIDX  NUMBER NOT NULL
			,CONTENT  CLOB NOT NULL
			,CREATED  DATE DEFAULT SYSDATE
			,ANSWER  	 NUMBER NOT NULL   	
			,CONSTRAINT pk_club_free_reply_${value} PRIMARY KEY(cfrIdx)
			,CONSTRAINT  fk_clubFreer_userIdx_${value} FOREIGN KEY(userIdx)
			  REFERENCES memberInfo(userIdx) ON DELETE CASCADE
			,CONSTRAINT fk_clubFreer_clubFreeIdx_${value} FOREIGN KEY(clubFreeIdx)
				REFERENCES club_free_${value}(clubFreeIdx) ON DELETE CASCADE
		)
	</update>	
	
	<update id="dropClubFreeReply" parameterType="Integer">
		DROP TABLE club_free_reply_${value} PURGE
	</update>
	
	<update id="createClubCalendar" parameterType="Integer">
		CREATE TABLE CLUB_SCH_${value} (
		  	num	 	          NUMBER      NOT NULL
		  	,userIdx              	NUMBER    	NOT NULL
		  	,clubIdx              	NUMBER    	NOT NULL
		  	,title              	VARCHAR2(255) NOT NULL
		  	,content             	VARCHAR(4000)         	NOT NULL
		  	,allDay      VARCHAR2(10)
		  	,color					VARCHAR2(10)
		  	,STARTDAY       	DATE DEFAULT SYSDATE NOT NULL
		  	,ENDDAY         	DATE DEFAULT SYSDATE
		  	,startTime   VARCHAR2(5)
        	,endTime     VARCHAR2(5)
		  	,created              	DATE         	DEFAULT SYSDATE
		  	,CONSTRAINT pk_CLUB_CALENDAR_${value} PRIMARY KEY(num)
		  	,CONSTRAINT fk_CLUB_CALENDAR_${value} FOREIGN KEY(userIdx)
		                   REFERENCES memberInfo(userIdx) ON DELETE CASCADE
		  	,CONSTRAINT fk2_CLUB_CALENDAR_${value} FOREIGN KEY(clubIdx)
		                    REFERENCES clubInfo(clubIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubCalendar" parameterType="Integer">
		DROP TABLE CLUB_sch_${value} PURGE
	</update>
	
	<update id="createClubCalendarSeq" parameterType="Integer">
		CREATE SEQUENCE club_sch_seq_${value}
		    INCREMENT BY 1
		    START WITH 1
		    NOMAXVALUE
		    NOCYCLE
		    NOCACHE
	</update>
	
	<update id="dropClubCalendarSeq" parameterType="Integer">
		DROP SEQUENCE club_sch_seq_${value}
	</update>
	
	
	<update id="createClubReview" parameterType="Integer">
		CREATE TABLE CLUB_REVIEW_${value} (
		    clubReviewIdx	NUMBER
		  	,userIdx              	NUMBER    	NOT NULL
		  	,clubIdx              	NUMBER    	NOT NULL
		  	,subject              	VARCHAR2(255) NOT NULL
		  	,content             	CLOB         	NOT NULL
		  	,hitCount            	NUMBER   	DEFAULT 0
		  	,created              	DATE         	DEFAULT SYSDATE
		    ,modified           	DATE         	DEFAULT SYSDATE
		 	
		      ,CONSTRAINT pk_CLUB_REVIEW_${value} PRIMARY KEY(clubReviewIdx)
		      ,CONSTRAINT fk_CLUB_REVIEW_${value} FOREIGN KEY(userIdx)
		                   REFERENCES memberInfo(userIdx)
		      ,CONSTRAINT fk2_CLUB_REVIEW_${value} FOREIGN KEY(clubIdx)
		                    REFERENCES clubInfo(clubIdx)
		)
	</update>
	
	<update id="dropClubReview" parameterType="Integer">
		DROP TABLE CLUB_REVIEW_${value} PURGE
	</update>
	
	<update id="createClubReviewR" parameterType="Integer">
		CREATE TABLE club_reviewR_${value} (
		     CRRIdx 	NUMBER not null
		    ,content   	VARCHAR2(200) NOT NULL
		    ,created 	DATE DEFAULT SYSDATE
			,answer 	NUMBER
		    ,clubreviewIdx NUMBER NOT NULL
		  	,userIdx NUMBER NOT NULL
		  	,CONSTRAINT pk_clubrevR_${value} PRIMARY KEY(CRRIdx)
			  ,CONSTRAINT fk_clubrevR_${value} FOREIGN KEY(useridx)
		                REFERENCES memberInfo(userIdx) ON DELETE CASCADE
		     ,CONSTRAINT fk2_clubrevR_${value} FOREIGN KEY(clubreviewIdx)
		                REFERENCES club_review_${value}(clubreviewIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubReviewR" parameterType="Integer">
		DROP TABLE CLUB_REVIEWR_${value} PURGE
	</update>
	
	<update id="createClubReviewRLike" parameterType="Integer">
		CREATE TABLE club_reviewR_like_${value} (
			CRRIdx NUMBER
			,userIdx NUMBER
			,CONSTRAINT pk_clubRevR_Like_${value} PRIMARY KEY(CRRIdx,userIdx)
			,CONSTRAINT fk_clubRevR_Like_${value} FOREIGN KEY(useridx)
			            	REFERENCES memberInfo(userIdx) ON DELETE CASCADE
			 ,CONSTRAINT fk2_clubRevR_Like_${value} FOREIGN KEY(CRRIdx)
			           	REFERENCES club_reviewR_${value}(CRRIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubReviewRLike" parameterType="Integer">
		DROP TABLE CLUB_REVIEWR_LIKE_${value} PURGE
	</update>
	
	
	<update id="createClubReviewFile" parameterType="Integer">
		CREATE TABLE club_review_file_${value} (
			 clubFileIdx NUMBER
			 ,CLUBREVIEWIDX NUMBER NOT NULL
			 ,SAVEFILENAME VARCHAR2(255) NOT NULL
			 ,ORIGINALFILENAME VARCHAR2(255) NOT NULL
			 
			,CONSTRAINT pk_clubrevF_${value} PRIMARY KEY(clubFileIdx)
			,CONSTRAINT fk_club_reviewF_${value} FOREIGN KEY(CLUBREVIEWIDX)
			 	REFERENCES CLUB_REVIEW_${value}(CLUBREVIEWIDX) ON DELETE CASCADE 
		)
	</update>
	
	<update id="dropClubReviewFile" parameterType="Integer">
		DROP TABLE CLUB_REVIEW_FILE_${value} PURGE
	</update>	
		
	<update id="createClubReviewLike" parameterType="Integer">	
		CREATE TABLE club_review_like_${value} (
			 clubreviewIdx NUMBER
			 ,userIdx NUMBER NOT NULL
			 
			 ,CONSTRAINT pk_clubRev_Like_${value} PRIMARY KEY(clubreviewIdx,userIdx)
			 ,CONSTRAINT fk_clubRev_Like_${value} FOREIGN KEY(useridx)
			       	REFERENCES memberInfo(userIdx) ON DELETE CASCADE
			,CONSTRAINT fk2_clubRev_Like_${value} FOREIGN KEY(CLUBREVIEWIDX)
			    	REFERENCES club_review_${value}(CLUBREVIEWIDX) ON DELETE CASCADE             	
		)
	</update>
	
	<update id="dropClubReviewLike" parameterType="Integer">
		DROP TABLE CLUB_REVIEW_LIKE_${value} PURGE
	</update>
	
	<update id="createClubApply" parameterType="Integer">
		CREATE TABLE club_apply_${value}(
			clubapplyIdx NUMBER NOT NULL,
			CLUBIDX NUMBER NOT NULL,
			volunIdx NUMBER NOT NULL,
			ENABLED NUMBER DEFAULT 1,
			hitcount number default 0,
			PRIMARY KEY(clubapplyIdx),
			CONSTRAINTS fk_club_volunIdx_${value} FOREIGN KEY(volunIdx)
			                  REFERENCES volun_bbs(volunIdx) ON DELETE CASCADE,
			CONSTRAINT fk2_club_clubIdx_${value} FOREIGN KEY(clubIdx)
			        REFERENCES clubinfo(clubIdx) ON DELETE CASCADE     
		)
	</update>
	
	<update id="dropClubApply" parameterType="Integer">
		DROP TABLE club_apply_${value} PURGE
	</update>
	
	<update id="createClubApplyR" parameterType="Integer">
		CREATE TABLE club_applyR_${value}(
			CARIDX	NUMBER,
			CONTENT	CLOB,
			CREATED	DATE DEFAULT SYSDATE,
			USERIDX	NUMBER NOT NULL,
			CLUBAPPLYIDX NUMBER,
			answer NUMBER DEFAULT 0,
			
			PRIMARY KEY(CARIDX),
			CONSTRAINT fk_applyR_userIdx_${value} FOREIGN KEY(userIdx)
			                  REFERENCES memberinfo(userIdx) ON DELETE CASCADE,
			CONSTRAINT fk_applyR_clubapplyIdx_${value} FOREIGN KEY(clubApplyIdx)
			                  REFERENCES club_apply_${value}(clubApplyIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubApplyR" parameterType="Integer">
		DROP TABLE club_applyR_${value} PURGE
	</update>
	
	<update id="createClubApplyMemList" parameterType="Integer">
		CREATE TABLE club_apply_memList_${value} (
		   userIdx NUMBER NOT NULL
		   ,clubApplyIdx NUMBER NOT NULL
		   ,hopeDate DATE    
		   ,PRIMARY KEY(userIdx,clubApplyIdx, hopeDate)   
		   ,CONSTRAINT fk_c_apply_mem_userIdx_${value} FOREIGN KEY(userIdx)
		               REFERENCES memberInfo(userIdx) 
		   ,CONSTRAINT fk_c_apply_mem_applyIdx_${value} FOREIGN KEY(clubApplyIdx)
		               REFERENCES club_apply_${value}(clubApplyIdx) on delete cascade               
		 )
	</update>
	
	<update id="dropClubApplyMemList" parameterType="Integer">
		DROP TABLE club_apply_memList_${value} PURGE
	</update>
	
	<update id="createClubApplyRLike" parameterType="Integer">
		create table club_applyR_like_${value} (
			CARIdx NUMBER NOT NULL,
			userIdx NUMBER NOT NULL,
			CONSTRAINT PK_club_applyR_like_${value} PRIMARY KEY (CARIdx,userIdx) ,
			CONSTRAINT fK_club_applyR_like_${value} foreign key(CARIdx) REFERENCES
			CLUB_APPLYR_${value}(CARIdx) ON DELETE CASCADE,
			CONSTRAINT fK2_club_applyR_like_${value} foreign key(userIdx) REFERENCES 
			MEMBERINFO(userIdx) ON DELETE CASCADE
		)
	</update>
	
	<update id="dropClubApplyRLike" parameterType="Integer">
		DROP TABLE club_applyR_like_${value} PURGE
	</update>
	
	
	
	
	
	
	
	<update id="dropBoardCategoryTable" parameterType="Long">
	    DROP TABLE b_${value}_category PURGE
	</update>

	<!-- 동아리 게시판 -->
	<update id="createBoardTable" parameterType="Long">
		CREATE TABLE b_${value}_board (
  		  num         NUMBER NOT NULL
  		  ,ClubSeq      NUMBER NOT NULL
 	      ,categoryNum  NUMBER NOT NULL
  		  ,subject     VARCHAR2(255) NOT NULL
  		  ,content     CLOB NOT NULL
  		  ,hitCount    NUMBER  DEFAULT 0
  		  ,created     DATE DEFAULT SYSDATE
  		  ,PRIMARY   KEY(num)
 		  ,FOREIGN    KEY(ClubSeq) REFERENCES ClubInfo(ClubSeq)
                     ON DELETE CASCADE
  		  ,FOREIGN   KEY(categoryNum) REFERENCES b_${value}_category(categoryNum)
  		             ON DELETE CASCADE
       )
	</update>

	<update id="dropBoardTable" parameterType="Long">
	    DROP TABLE b_${value}_board PURGE
	</update>

	<!-- 동아리 게시판 공감 -->
	<update id="createBoardLikeTable" parameterType="Long">
	CREATE TABLE b_${value}_boardLike (
  	  num       NUMBER NOT NULL
  	  ,userId   VARCHAR2(50) NOT NULL
  	  ,PRIMARY  KEY(num, userId)
  	  ,FOREIGN  KEY(num) REFERENCES b_${value}_board(num)
	      ON DELETE CASCADE
 	   ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	      ON DELETE CASCADE
	)
	</update>
	<update id="dropBoardLikeTable" parameterType="Long">
	    DROP TABLE b_${value}_boardLike PURGE
	</update>

	<!-- 동아리 게시판 파일 -->
	<update id="createBoardFileTable" parameterType="Long">
	CREATE TABLE b_${value}_boardFile (
 	   fileNum              NUMBER NOT NULL
 	   ,num                  NUMBER NOT NULL
 	   ,saveFilename     VARCHAR2(255) NOT NULL
 	   ,originalFilename VARCHAR2(255) NOT NULL
 	   ,fileSize         NUMBER
 	   ,PRIMARY KEY(fileNum)
 	   ,FOREIGN KEY(num) REFERENCES b_${value}_board(num)
                      ON DELETE CASCADE
	)
	</update>

	<update id="dropBoardFileTable" parameterType="Integer">
	    DROP TABLE b_${value}_boardFile PURGE
	</update>
	
	<!-- 동아리 게시판 리플 -->
	<update id="createBoardReplyTable" parameterType="Long">
	CREATE TABLE b_${value}_boardReply (
 	   replyNum  NUMBER NOT NULL
  	   ,num      NUMBER NOT NULL
  	   ,userId   VARCHAR2(50) NOT NULL
  	   ,content  VARCHAR2(4000) NOT NULL
   	   ,created  DATE DEFAULT SYSDATE
  	   ,answer   NUMBER NOT NULL
 	   ,PRIMARY  KEY(replyNum)
   	   ,FOREIGN  KEY(num) REFERENCES b_${value}_board(num)
	         ON DELETE CASCADE
   	   ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	         ON DELETE CASCADE
	)
	</update>
	<update id="dropBoardReplyTable" parameterType="Long">
	    DROP TABLE b_${value}_boardReply PURGE
	</update>

 	<!-- 동아리 게시판 리플 공감/비공감 -->
	<update id="createBoardReplyLikeTable" parameterType="Long">
	CREATE TABLE b_${value}_boardReplyLike (
 	    replyNum  NUMBER NOT NULL
 	    ,userId   VARCHAR2(50) NOT NULL
 	    ,replyLike NUMBER(1) NOT NULL
 	    ,PRIMARY  KEY(replyNum, userId)
 	    ,FOREIGN  KEY(replyNum) REFERENCES b_${value}_boardReply(replyNum)
	         ON DELETE CASCADE
 	    ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	         ON DELETE CASCADE
	)
	</update>    
	<update id="dropBoardReplyLikeTable" parameterType="Long">
	    DROP TABLE b_${value}_boardReplyLike PURGE
	</update>

 	<!-- 동아리 방명록 -->
	<update id="createGuestTable" parameterType="Long">
	CREATE TABLE b_${value}_guest (
 	    num       NUMBER NOT NULL
	    ,ClubSeq      NUMBER NOT NULL
	    ,userId   VARCHAR2(50) NOT NULL
	    ,content  VARCHAR2(4000) NOT NULL
	    ,created  DATE DEFAULT SYSDATE
	    ,PRIMARY  KEY(num)
 	    ,FOREIGN    KEY(ClubSeq) REFERENCES ClubInfo(ClubSeq)
                     ON DELETE CASCADE
        ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	      ON DELETE CASCADE
	)
	</update>    
	<update id="dropGuestTable" parameterType="Long">
	    DROP TABLE b_${value}_guest PURGE
	</update>

 	<!-- 동아리 포토 -->
	<update id="createPhotoTable" parameterType="Long">
	CREATE TABLE b_${value}_photo (
 	   num       NUMBER NOT NULL
  	   ,ClubSeq      NUMBER NOT NULL
 	   ,subject  VARCHAR2(255) NOT NULL
  	   ,content  VARCHAR2(4000) NOT NULL
 	   ,imageFilename VARCHAR2(255) NOT NULL
 	   ,created  DATE DEFAULT SYSDATE
  	   ,PRIMARY  KEY(num)
   	   ,FOREIGN    KEY(ClubSeq) REFERENCES ClubInfo(ClubSeq)
  	                   ON DELETE CASCADE
	)
	</update>    
	<update id="dropPhotoTable" parameterType="Long">
	    DROP TABLE b_${value}_photo PURGE
	</update>
	
	<select id="joinClubEnabled" parameterType="map" resultType="com.bong.club.JoinClub">
	
	
  select m.userAddr, (select count(*) from joinclub where userIdx=#{userIdx} ) joinCount,
  (select authority from joinclub where clubIdx=${clubSeq} and userIdx=#{userIdx}) authority,
(select clubAddr from clubInfo where CLUBIDX=${clubSeq}) clubAddr
from memberInfo m where userIdx=${userIdx}
	
	</select>
	
	<!-- 가입신청한 회원을 "가입대기"로 변경 -->
	<insert id="joinApply" parameterType="map" >
	   insert into joinClub(joinclubIdx,clubIdx, userIdx, authority) 
	   values(joinclub_seq.NEXTVAL,${clubSeq},#{userIdx},'가입대기')
	</insert>
	<!-- 동아리에 들어올 때 해당동아리에서의 회원권한 가져오기 (일반/관리자/가입대기 등) -->
	<select id="readAuthority" parameterType="map" resultType="String">
	select authority
	from joinclub 
	where clubIdx=${clubSeq} and userIdx=#{userIdx}
	</select>
	
	<select id="joinClubList" parameterType="map" resultType="com.bong.member.Member">
	SELECT userName, userAddr,TO_CHAR(joinDate,'YYYY-MM-DD/HH24:MI' ) joinDate,m.USERGENDER,TRUNC( MONTHS_BETWEEN( SYSDATE, userbirth)/12) as age
	FROM joinclub j join memberInfo m on m.userIdx=j.userIdx
	WHERE clubIdx=${clubSeq} and authority='가입대기'
   
	</select>
	
</mapper>