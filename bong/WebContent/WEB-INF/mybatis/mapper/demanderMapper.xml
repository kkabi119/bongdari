<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demander">
<!-- 리뷰 create(insert) 관련 -->
	<!-- 리뷰인덱스시퀀스 -->
	<select id="DeReviewSeq" resultType="Integer">
		SELECT service_review_seq.NEXTVAL FROM DUAL
	</select>
	
	<!-- 리뷰 글넣기 -->
	<insert id="insertDeReview" parameterType="com.bong.demander.review.DeReview">
	INSERT INTO service_review_${demander_seq}(servicereviewidx,subject,CONTENT,serviceidx,useridx)
	VALUES(#{serviceReviewIdx},#{subject},#{content},${demander_seq},#{userIdx})
	</insert>
	
	
<!-- 파일 *********************** -->
	<!-- 리뷰 파일넣기 -->
	<insert id="insertFile" parameterType="com.bong.demander.review.DeReview">
	INSERT INTO service_review_file_${demander_seq}(servicefileidx,savefilename,originalfilename,servicereviewidx
	)VALUES(service_rf_seq.NEXTVAL,#{saveFilename, jdbcType=VARCHAR},#{originalFilename, jdbcType=VARCHAR},#{serviceReviewIdx})
	</insert>
	

	<select id="maxFileNum" resultType="Integer" parameterType="map">
		SELECT NVL(MAX(servicefileidx), 0) FROM service_review_file_${demander_seq}
	</select>
	
	<select id="listFile" parameterType="map"
	              resultType="com.bong.demander.review.DeReview">
	   SELECT serviceFileIdx,serviceReviewIdx,saveFilename,originalFilename
	    FROM service_review_file_${demander_seq} WHERE serviceReviewIdx=#{serviceReviewIdx}  
	</select>
	
	<select id="readFile" parameterType="map"
	              resultType="com.bong.demander.review.DeReview">
		SELECT serviceFileIdx, serviceReviewIdx, saveFilename,originalFilename
	    FROM service_review_file_${demander_seq} WHERE serviceFileIdx=#{serviceFileIdx}    
	</select>
	
	<delete id="deleteFile" parameterType="map">
	DELETE FROM service_review_file_${demander_seq} WHERE serviceFileIdx =#{serviceFileIdx}
	</delete>
	
<!-- 파일  끝*********************** -->	
	
	
	<!-- 리뷰 list관련 -->
	<sql id="where-list">
	  <if test="searchKey=='userName'">
	      userName=#{searchValue}
	  </if>
	  <if test="searchKey=='subject'">
	      INSTR(subject, #{searchValue}) &gt; 0
	  </if>
	  <if test="searchKey=='content'">
	      DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0 
	  </if>
	  <if test="searchKey=='created'">
	      TO_CHAR(s.created, 'YYYY-MM-DD') = #{searchValue}
	      OR TO_CHAR(s.created, 'YYYYMMDD') = #{searchValue}
	  </if>
	</sql>
	
	<!-- 글개수 -->
	<select id="dataCount" parameterType="map"
	            resultType="Integer">
	  SELECT NVL(COUNT(*), 0) FROM service_review_${demander_seq} s
	        JOIN checkId c  ON s.userIdx=c.userIdx
	     <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 리뷰 리스트 -->
	<select id="listDeReview" parameterType="map"
	            resultType="com.bong.demander.review.DeReview">
		SELECT * FROM (
     SELECT ROWNUM rnum, tb.* FROM (
               SELECT s.servicereviewidx, c.useridx, userid, c.username, subject, CONTENT ,
                         to_char(s.created, 'YYYY-MM-DD') created ,hitcount,
                         nvl(replycount, 0) replycount, nvl(likecount, 0) likecount
                FROM service_review_${demander_seq} s
                JOIN checkid c ON s.useridx=c.useridx
               
                LEFT OUTER JOIN ( 
                       SELECT serviceReviewIdx, count(*) replycount FROM service_review_reply_${demander_seq} GROUP BY serviceReviewIdx
                 ) tbreply  ON s.servicereviewidx = tbreply.servicereviewidx 
                LEFT OUTER JOIN ( 
                    SELECT serviceReviewIdx, count(*) likecount FROM service_review_like_${demander_seq} GROUP BY serviceReviewIdx
                 ) tblike ON s.servicereviewidx = tblike.servicereviewidx 
                 <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
	               </where>
	               
              ORDER  BY serviceReviewIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	
	<!-- 메인에 띄울 리뷰 small리스트 -->
	<select id="listDeReviewSmall" parameterType="map"
	            resultType="com.bong.demander.review.DeReview">
		  SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT serviceReviewIdx, subject,content
			        FROM service_review_${demander_seq}
	                ORDER BY serviceReviewIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	
	<!-- 리뷰 글보기 -->
	<select id="readDeReview" parameterType="map" resultType="com.bong.demander.review.DeReview">
		SELECT r.servicereviewidx, c.useridx, userid, c.username, subject,
		content,hitcount, r.created,NVL(replyCount, 0) replyCount,NVL(likeCount, 0) likeCount
		FROM service_review_${demander_seq} r 
		  JOIN checkId c ON r.useridx=c.useridx
   	    LEFT OUTER JOIN
			        ( SELECT serviceReviewIdx, count(*) replycount
                                 FROM service_review_reply_${demander_seq}  tbreply GROUP BY serviceReviewIdx
			        ) tbreply ON r.servicereviewidx = tbreply.servicereviewidx
          LEFT OUTER JOIN
			           (SELECT servicereviewidx, COUNT(*) likeCount
                                 FROM service_review_like_${demander_seq} GROUP BY servicereviewidx
			           ) tblike ON tbreply.servicereviewidx = tblike.servicereviewidx
		WHERE r.servicereviewidx=#{serviceReviewIdx}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="hitCountDeReview" parameterType="map">
		UPDATE service_review_${demander_seq} SET hitCount=hitCount+1 WHERE servicereviewidx = #{serviceReviewIdx}
	</update>
	
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadDeReview" resultType="com.bong.demander.review.DeReview" 
				parameterType="map">
		SELECT tb.* FROM (
			SELECT serviceReviewIdx, subject
				FROM service_review_${demander_seq} r
					JOIN checkId c ON r.userIdx=c.userIdx
					<where>
						<if test="searchValue != null and searchValue != '' ">
							<include refid="where-list" />
						</if>
						      <![CDATA[
						           AND (servicereviewidx>#{serviceReviewIdx})
						      ]]>
				</where>
			ORDER BY serviceReviewIdx ASC
		)tb WHERE ROWNUM=1
	</select>
	
	<!-- 다음글 -->
	<select id="nextReadDeReview" resultType="com.bong.demander.review.DeReview" 
				parameterType="map">
	SELECT tb.* FROM (
			SELECT serviceReviewIdx, subject
				FROM service_review_${demander_seq} r
					JOIN checkId c ON r.userIdx=c.userIdx
				<where>
						<if test="searchValue != null and searchValue != '' ">
							<include refid="where-list" />
						</if>
						      <![CDATA[
						           AND (servicereviewidx<#{serviceReviewIdx})
						      ]]>
				</where>
			ORDER BY serviceReviewIdx DESC
		)tb WHERE ROWNUM=1
	</select>
	
	<!-- 수정  service_review-->
     <update id="updateDeReview" parameterType="com.bong.demander.review.DeReview">
         UPDATE service_review_${demander_seq} SET subject=#{subject}, content=#{content}
                    WHERE serviceReviewIdx = #{serviceReviewIdx}
      </update>
      
   <!-- 수정  service_review_file-->
     <update id="updateDeReviewFile" parameterType="com.bong.demander.review.DeReview">
         UPDATE service_review_file_${demander_seq} SET originalFilename=#{originalFilename, jdbcType=VARCHAR}, 
         saveFilename=#{saveFilename, jdbcType=VARCHAR}
                    WHERE serviceReviewIdx = #{serviceReviewIdx}
    </update>
	
	<!-- 삭제  -->
      <delete id="deleteDeReview" parameterType="com.bong.demander.review.DeReview">
           DELETE FROM service_review_${demander_seq} WHERE serviceReviewIdx = #{serviceReviewIdx}
      </delete>
      
    
    <!-- 좋아요상태 -->
    <select id="stateDeRevLike" parameterType="com.bong.demander.review.DeReview" resultType="Integer">
     SELECT NVL(COUNT(*),0) FROM service_review_like_${demander_seq} 
     WHERE userIdx=#{userIdx} AND serviceReviewIdx=#{serviceReviewIdx}
    </select>
    
    <!--send 좋아요-->
	<insert id="insertDeReviewLike" parameterType="com.bong.demander.review.DeReview">
	INSERT INTO service_review_like_${demander_seq}(serviceReviewIdx, userIdx)
	   VALUES (#{serviceReviewIdx}, #{userIdx})
	</insert>
	
	<!-- 좋아요가 이미 눌렸을때 해제 되도록 -->
	<delete id="deleteDeReviewLike" parameterType="com.bong.demander.review.DeReview">
	DELETE FROM service_review_like_${demander_seq} WHERE serviceReviewIdx=#{serviceReviewIdx} AND userIdx=#{userIdx}
	</delete>
	
	<!-- 
	<update id="updateDeRevLikeCount" parameterType="com.bong.demander.DeReview">
		UPDATE bbsReplyLike SET replyLike=#{replyLike} WHERE userId=#{userId} and replyNum=#{replyNum}
	</update> -->
	
	<select id="deRevCountLike" resultType="map" 
	           parameterType="com.bong.demander.review.DeReview">
	   SELECT  NVL(COUNT(*), 0 ) likeCount  
	   FROM service_review_like_${demander_seq} WHERE serviceReviewIdx=#{serviceReviewIdx}
	</select>
      
      
	<!-- 댓글 처리................. -->
	<select id="SRRSeq" resultType="Integer">
		SELECT service_rr_seq.NEXTVAL FROM DUAL
	</select>
	
	<insert id="deRevInsertReply" parameterType="com.bong.demander.review.DeReviewReply">
	INSERT INTO service_review_reply_${demander_seq}(srrIdx, serviceReviewIdx, userIdx, CONTENT, answer)
    VALUES (#{replyNum},#{serviceReviewIdx},#{userIdx},#{content},#{answer})
	</insert>
	
	
	<select id="DeRevReplyDataCount" resultType="Integer" 
	           parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM service_review_reply_${demander_seq} WHERE serviceReviewIdx=#{serviceReviewIdx} AND answer=0
	</select>
	
	<!-- 댓글 리스트 -->
	<select id="listDeReviewReply" resultType="com.bong.demander.review.DeReviewReply" 
	          parameterType="map">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
		        SELECT tbreply.SRRIDX as replyNum, serviceReviewIdx, userId,userIdx, userName 
		                    ,content, created, tbreply.answer
		                    ,NVL(answerCount, 0) answerCount,NVL(likeCount, 0)likeCount
		        FROM
		        (
				      (
					     SELECT srridx, r.serviceReviewIdx, r.userIdx, userid,
               				c.userName, r.content, r.created, answer
					        FROM service_review_reply_${demander_seq} r 
			                JOIN service_review_${demander_seq} s ON r.serviceReviewIdx=s.serviceReviewIdx
			                JOIN checkId c ON r.useridx=c.useridx
			                WHERE r.serviceReviewIdx=#{serviceReviewIdx} AND answer=0
			           ) tbreply
			           LEFT OUTER JOIN
			           (
			                SELECT answer, COUNT(*) answerCount
                                 FROM service_review_reply_${demander_seq} GROUP BY answer
			           ) tbanswer ON tbreply.SRRIDX = tbanswer.answer
			             LEFT OUTER JOIN
			           (
			                SELECT srridx, COUNT(*) likeCount
                                 FROM serv_rev_reply_like_${demander_seq} GROUP BY srridx
			           ) tblike ON tbreply.srridx = tblike.srridx
	           )
	           ORDER BY replynum DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>

	</select>

    <!-- 댓글별 답글 리스트 -->
	<select id="listDeRevReplyAnswer" resultType="com.bong.demander.review.DeReviewReply" 
	          parameterType="map">
       SELECT SRRIDX AS replyNum, serviceReviewIdx, tbreply.userIdx, c.userName, content, created, answer
	          FROM service_review_reply_${demander_seq} tbreply 
	          JOIN checkId c ON tbreply.userIdx=c.userIdx
              WHERE answer=#{answer}
              ORDER BY replyNum DESC
	</select>
	
    <!-- 댓글별 답글 개수 -->
	<select id="DeRevReplyCountAnswer" resultType="Integer" 
	           parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM service_review_reply_${demander_seq} WHERE answer=#{answer}
	</select>
	
	<!-- 댓글지우기 -->
	<delete id="deleteDeRevReply" parameterType="map">
	DELETE service_review_reply_${demander_seq} WHERE
	    <if test="mode == 'num' ">
			 serviceReviewIdx=#{serviceReviewIdx}
		</if>
	    <if test="mode == 'reply' ">
			 SRRIDX IN 
               (SELECT SRRIDX FROM service_review_reply_${demander_seq} START WITH  SRRIDX = #{replyNum}
	            CONNECT BY PRIOR SRRIDX = answer)
		</if>
	    <if test="mode == 'answer' ">
			 SRRIDX=#{replyNum}
		</if>
	</delete>
	
	<!-- 댓글 좋아요 -->
	  <!-- 좋아요상태 -->
    <select id="stateDeRevLikeRe" parameterType="com.bong.demander.review.DeReviewReply" resultType="Integer">
     SELECT NVL(count(*),0) FROM serv_rev_reply_like_${demander_seq} 
     WHERE userIdx=#{userIdx} AND SRRIDX=#{replyNum}
    </select>
    
    <!--send 좋아요-->
	<insert id="insertDeReviewLikeRe" parameterType="com.bong.demander.review.DeReviewReply">
	INSERT INTO serv_rev_reply_like_${demander_seq}(SRRIDX, userIdx)
	   VALUES (#{replyNum}, #{userIdx})
	</insert>
	
	<!-- 좋아요가 이미 눌렸을때 해제 되도록 -->
	<delete id="deleteDeReviewLikeRe" parameterType="com.bong.demander.review.DeReviewReply">
	DELETE FROM serv_rev_reply_like_${demander_seq} WHERE SRRIDX=#{replyNum} AND userIdx=#{userIdx}
	</delete>
	
	<!-- 좋아요 개수 -->
	<select id="deRevCountLikeRe" resultType="map" 
	           parameterType="map">
	   SELECT NVL(count(*),0) likeCount FROM serv_rev_reply_like_${demander_seq} WHERE SRRIDX=#{replyNum}
	</select>
      

      
<!-- 	
	회원 탈퇴시 게시물 삭제 .................
	<select id="listNoticeId" parameterType="String" resultType="com.bong.club.notice.Notice">
	   SELECT clubNoticeIdx, m.userIdx, n.userIdx, userName, subject, content
				   ,hitCount, n.created,  n.saveFilename, n.originalFilename
		FROM club_notice n JOIN memberinfo m ON n.userIdx=m.userIdx
		WHERE m.userIdx = #{userIdx}
	</select>
    <delete id="deleteNoticeId" parameterType="String">
         DELETE FROM club_notice WHERE userIdx = #{userIdx}
    </delete>
	 -->
	
	

</mapper>