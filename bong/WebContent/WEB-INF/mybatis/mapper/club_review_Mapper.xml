<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club_review">
<!-- 리뷰 create(insert) 관련 -->

	<!-- 리뷰인덱스시퀀스 -->
	<select id="ClReviewSeq" resultType="Integer">
		SELECT club_review_seq.NEXTVAL FROM DUAL
	</select>
	
	<!-- 리뷰 글넣기 -->
	<insert id="insertClReview" parameterType="com.bong.club.review.ClReview">
	INSERT INTO club_review_${clubSeq}(clubReviewIdx,subject,CONTENT, clubIdx, useridx)
	VALUES(#{clubReviewIdx},#{subject},#{content},${clubSeq},#{userIdx})
	</insert>
	
	
<!-- 파일 *********************** -->
	<!-- 리뷰 파일넣기 -->
	<insert id="insertFile" parameterType="com.bong.club.review.ClReview">
	INSERT INTO club_review_file_${clubSeq}(clubfileidx,savefilename,originalfilename,clubreviewidx
	)VALUES(club_rf_seq.NEXTVAL,#{saveFilename, jdbcType=VARCHAR},#{originalFilename, jdbcType=VARCHAR},#{clubReviewIdx})
	</insert>
	

	<select id="maxFileNum" resultType="Integer" parameterType="map">
		SELECT NVL(MAX(clubfileidx), 0) FROM club_review_file_${clubSeq}
	</select>
	
	<select id="listFile" parameterType="map"
	              resultType="com.bong.club.review.ClReview">
	   SELECT clubFileIdx,clubReviewIdx,saveFilename,originalFilename
	    FROM club_review_file_${clubSeq} WHERE clubReviewIdx=#{num}  
	</select>
	
	<select id="readFile" parameterType="map"
	              resultType="com.bong.club.review.ClReview">
		SELECT clubFileIdx, clubReviewIdx, saveFilename,originalFilename
	    FROM club_review_file_${clubSeq} WHERE clubFileIdx=#{clubFileIdx}    
	</select>
	
	<delete id="deleteFile" parameterType="map">
	DELETE FROM club_review_file_${clubSeq} WHERE clubFileIdx =#{clubFileIdx}
	</delete>
	
<!-- 파일  끝*********************** -->	
	
	
	<!-- 리뷰 list관련 -->
	<sql id="where-list">
	  <if test="searchKey=='userName'">
	      userName=#{searchValue}
	  </if>
	  <if test="searchKey=='subject'">
	      INSTR(subject, #{searchValue}) &gt; 0
	  </if>
	  <if test="searchKey=='content'">
	      DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0 
	  </if>
	  <if test="searchKey=='created'">
	      TO_CHAR(s.created, 'YYYY-MM-DD') = #{searchValue}
	      OR TO_CHAR(s.created, 'YYYYMMDD') = #{searchValue}
	  </if>
	</sql>
	
	<!-- 글개수 -->
	<select id="dataCount" parameterType="map"
	            resultType="Integer">
	            
	  SELECT NVL(COUNT(*), 0)
	   FROM club_review_${clubSeq} c
	   			 JOIN memberInfo m  ON c.userIdx=m.userIdx
	    <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	     </where>   
	</select>
	
	<!-- 리뷰 리스트 -->
	<select id="listClReview" parameterType="map"
	            resultType="com.bong.club.review.ClReview">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
           			 SELECT tbrev.clubReviewIdx, tbrev.useridx, userid, username, subject,tbrev.content
			          ,created,hitcount, NVL(replyCount, 0) replyCount, NVL(likeCount, 0) likeCount
        FROM
        (
         		(
			     SELECT clubReviewIdx, m.userIdx, m.userId, m.userName, subject,s.content
			           ,TO_CHAR(s.created, 'YYYY-MM-DD') created
					   ,hitCount
			        FROM club_review_${clubSeq} s
	       			  JOIN checkId m ON s.useridx=m.useridx
	       			  <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
	                </where>
                  )tbrev
                  LEFT OUTER JOIN
			        (
			                SELECT clubReviewIdx, count(*) replycount
			                FROM club_reviewR_${clubSeq} tbreply 
			                WHERE answer=0
			                GROUP BY clubReviewIdx
			                
			        ) tbreply 
			     ON tbrev.clubReviewIdx = tbreply.clubReviewIdx
	            ) LEFT OUTER JOIN
			   (
			          SELECT clubReviewIdx, COUNT(*) likeCount
                      FROM club_review_like_${clubSeq} GROUP BY clubReviewIdx
			    ) tblike 
			    ON tbrev.clubReviewIdx = tblike.clubReviewIdx    
                   
	           ORDER BY tbrev.clubReviewIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 리뷰 글보기 -->
	<select id="readClReview" parameterType="map" resultType="com.bong.club.review.ClReview">
		SELECT r.clubreviewidx, c.useridx, userid, c.username, subject, content, hitcount, r.created,NVL(replyCount, 0) replyCount, NVL(likeCount, 0) likeCount
		FROM club_review_${clubSeq} r 
			    JOIN checkId c ON r.useridx=c.useridx
		   	    LEFT OUTER JOIN
				( 	   SELECT clubReviewIdx, count(*) replycount
		               FROM club_reviewR_${clubSeq}  tbreply GROUP BY clubReviewIdx
				) tbreply 
			    ON r.clubreviewidx = tbreply.clubreviewidx
		        LEFT OUTER JOIN
				(      SELECT clubreviewidx, COUNT(*) likeCount
		               FROM club_review_like_${clubSeq} GROUP BY clubreviewidx
				) tblike ON tbreply.clubreviewidx = tblike.clubreviewidx
		WHERE r.clubreviewidx=#{num}
	</select>
	
	<!-- 메인용 글리스트 -->
	<select id="listReviewSmall" parameterType="map" resultType="com.bong.club.review.ClReview">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT clubreviewIdx, subject,content
			        FROM club_review_${clubSeq}
	                ORDER BY clubreviewIdx DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 조회수 증가 -->
	<update id="hitCountClReview" parameterType="map">
		UPDATE club_review_${clubSeq} SET hitCount=hitCount+1 WHERE clubreviewidx = #{num}
	</update>
	
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadClReview" resultType="com.bong.club.review.ClReview" 
				parameterType="map">
		SELECT tb.* FROM (
			SELECT clubReviewIdx, subject
				FROM club_review_${clubSeq} r
						JOIN checkId c ON r.userIdx=c.userIdx
					<where>
						<if test="searchValue != null and searchValue != '' ">
							<include refid="where-list" />
						</if>
						      <![CDATA[
						           AND (clubreviewidx>#{num})
						      ]]>
				</where>
			ORDER BY clubReviewIdx ASC
		)tb WHERE ROWNUM=1
	</select>
	
	<!-- 다음글 -->
	<select id="nextReadClReview" resultType="com.bong.club.review.ClReview" 
				parameterType="map">
	SELECT tb.* FROM (
			SELECT clubReviewIdx, subject
				FROM club_review_${clubSeq} r
					JOIN checkId c ON r.userIdx=c.userIdx
				<where>
						<if test="searchValue != null and searchValue != '' ">
							<include refid="where-list" />
						</if>
						      <![CDATA[
						           AND (clubreviewidx<#{num})
						      ]]>
				</where>
			ORDER BY clubReviewIdx DESC
		)tb WHERE ROWNUM=1
	</select>
	
	<!-- 수정  club_review_${clubSeq}-->
     <update id="updateClReview" parameterType="com.bong.club.review.ClReview">
         UPDATE club_review_${clubSeq} SET subject=#{subject}, content=#{content}
                    WHERE clubReviewIdx = #{clubReviewIdx}
      </update>
      
   <!-- 수정  club_review_file-->
     <update id="updateClReviewFile" parameterType="com.bong.club.review.ClReview">
         UPDATE club_review_file_${clubSeq} SET originalFilename=#{originalFilename, jdbcType=VARCHAR}, 
         saveFilename=#{saveFilename, jdbcType=VARCHAR}
                    WHERE clubReviewIdx = #{clubReviewIdx}
    </update>
	
	<!-- 삭제  -->
      <delete id="deleteReview" parameterType="com.bong.club.review.ClReview">
           DELETE FROM club_review_${clubSeq} 
           WHERE clubReviewIdx = #{clubReviewIdx}
      </delete>
      
     <!-- 													게시물의  좋아요 처리 											 -->
    
    <!-- 좋아요상태 -->
    <select id="stateLike" parameterType="com.bong.club.review.ClReview" resultType="Integer">
     SELECT NVL(COUNT(*),0) FROM club_review_like_${clubSeq} 
     WHERE userIdx=#{userIdx} AND clubReviewIdx=#{clubReviewIdx}
    </select>
    
    <!--send 좋아요-->
	<insert id="insertLike" parameterType="com.bong.club.review.ClReview">
	INSERT INTO club_review_like_${clubSeq}(clubReviewIdx, userIdx)
	   VALUES (#{clubReviewIdx}, #{userIdx})
	</insert>
	
	<!-- 좋아요가 이미 눌렸을때 해제 되도록 -->
	<delete id="deleteLike" parameterType="com.bong.club.review.ClReview">
	DELETE FROM club_review_like_${clubSeq} WHERE clubReviewIdx=#{clubReviewIdx} AND userIdx=#{userIdx}
	</delete>

	<!-- 좋아요 세기 -->
	<select id="countLike" resultType="map" parameterType="com.bong.club.review.ClReview">
	   SELECT  NVL(COUNT(*), 0 ) likeCount
	   FROM club_review_like_${clubSeq} WHERE clubReviewIdx=#{clubReviewIdx}
	</select>
      
      
<!--								 										댓글 처리	 										-->

	<!-- 시퀀스 +1 지정  -->
	<select id="CRRSeq" resultType="Integer"> 
		SELECT club_reviewR_seq.NEXTVAL FROM DUAL
	</select>
	
	<!-- 	댓글 작성 -->
	<insert id="insertReviewReply" parameterType="com.bong.club.review.ClReviewReply">
		INSERT INTO club_reviewR_${clubSeq}(crrIdx, clubReviewIdx, userIdx, CONTENT, answer)
	    VALUES (#{replyNum}, #{num},#{userIdx},  #{content}, #{answer})
	</insert>
	
	<!-- 	댓글 개수 세기 -->
	<select id="replyDataCount" resultType="Integer"   parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM club_reviewR_${clubSeq} WHERE clubReviewIdx=#{clubReviewIdx} AND answer=0
	</select>
	
	<!-- 댓글 리스트 -->
	<select id="listReply" resultType="com.bong.club.review.ClReviewReply" 
	          parameterType="map">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
		        SELECT tbreply.CRRIDX as replyNum, clubReviewIdx as num, tbreply.userIdx, userId, userName 
		                    ,content, created, tbreply.answer, NVL(answerCount, 0) answerCount, NVL(likeCount, 0) likeCount
		        FROM
		        (
				      (
					     SELECT CRRIDX, r.clubReviewIdx, c.userIdx, c.userid, c.userName, r.content, r.created, answer
					        FROM club_reviewR_${clubSeq} r 
			                JOIN club_review_${clubSeq} s ON r.clubReviewIdx=s.clubReviewIdx
			                JOIN checkId c ON s.useridx=c.useridx
			                WHERE r.clubReviewIdx=#{clubReviewIdx} AND answer=0
			           ) tbreply
			           LEFT OUTER JOIN
			           (
			                SELECT answer, COUNT(*) answerCount
                                 FROM club_reviewR_${clubSeq} GROUP BY answer
			           ) tbanswer ON tbreply.CRRIDX = tbanswer.answer
			             LEFT OUTER JOIN
			           (
			                SELECT CRRIDX, COUNT(*) likeCount
                                 FROM club_reviewR_like_${clubSeq} GROUP BY CRRIDX
			           ) tblike ON tbreply.CRRIDX = tblike.CRRIDX
	           )
	           ORDER BY replynum DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>

	</select>

    <!-- 대댓글 리스트 -->
	<select id="listReplyAnswer" parameterType="map" resultType="com.bong.club.review.ClReviewReply"  >
       SELECT CRRIDX AS replyNum, clubReviewIdx AS num, tbreply.userIdx, c.userName, content, created, answer
	   FROM club_reviewR_${clubSeq} tbreply 
	   		   JOIN checkId c ON tbreply.userIdx=c.userIdx
       WHERE answer=#{answer}
       ORDER BY replyNum DESC
	</select>
	
    <!-- 댓글별 답글 개수 -->
	<select id="replyCountAnswer" resultType="Integer" 
	           parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM club_reviewR_${clubSeq} WHERE answer=#{answer}
	</select>
	
	<!-- 게시글(num) / 댓글(reply) / 대댓글(answer) 삭제-->
	<delete id="deleteReply" parameterType="map">
		DELETE club_reviewR_${clubSeq} WHERE
		    <if test="mode == 'num' ">
				 clubReviewIdx=#{num}
			</if>
		    <if test="mode == 'reply' ">
				 CRRIDX IN 
	               (SELECT CRRIDX FROM club_reviewR_${clubSeq} START WITH CRRIDX = #{replyNum}
		            CONNECT BY PRIOR CRRIDX = answer)
			</if>
		    <if test="mode == 'answer' ">
				 CRRIDX=#{replyNum}
			</if>
	</delete>
	
	<!-- 													댓 글 좋아요 처리 													 -->
	
		<!-- 	댓글 좋아요 세기 		-->
	<select id="replyCountLike"  parameterType="map" resultType="map" >
	   SELECT NVL(count(*),0) likeCount 
	   FROM club_reviewR_like_${clubSeq}
	   WHERE CRRIDX=#{replyNum}
	</select>
		
	  <!-- 좋아요상태 -->
    <select id="stateReplyLike" parameterType="com.bong.club.review.ClReviewReply" resultType="Integer">
     SELECT NVL(count(*),0) FROM club_reviewR_like_${clubSeq} 
     WHERE userIdx=#{userIdx} AND CRRIDX=#{replyNum}
    </select>
    
    <!--send 좋아요-->
	<insert id="insertReplyLike" parameterType="com.bong.club.review.ClReviewReply">
	INSERT INTO club_reviewR_like_${clubSeq}(CRRIDX, userIdx)
	   VALUES (#{replyNum}, #{userIdx})
	</insert>
	
	<!-- 좋아요가 이미 눌렸을때 해제 되도록 -->
	<delete id="deleteReplyLike" parameterType="com.bong.club.review.ClReviewReply">
	DELETE FROM club_reviewR_like_${clubSeq} WHERE CRRIDX=#{replyNum} AND userIdx=#{userIdx}
	</delete>
	

      
<!-- 	
	(보류)댓글 좋아요/싫어요 처리.................
	<insert id="insertDeRevReplyLike" parameterType="com.bong.club.review.ClReviewReply">
	INSERT INTO club_review_${clubSeq}_like(replyNum, userId, replyLike)
	   VALUES (#{replyNum}, #{userId}, #{replyLike})
	</insert>

	<select id="DeRevReplyCountLike" resultType="map" 
	           parameterType="Integer">
	   SELECT  NVL(COUNT(DECODE(replyLike, 1, 1)), 0) likeCount,
			        NVL(COUNT(DECODE(replyLike, 0, 1)), 0) disLikeCount
	        FROM bbsReplyLike WHERE replyNum=#{replyNum}
	</select> -->
      
<!-- 	
	회원 탈퇴시 게시물 삭제 .................
	<select id="listNoticeId" parameterType="String" resultType="com.bong.club.notice.Notice">
	   SELECT clubNoticeIdx, m.userIdx, n.userIdx, userName, subject, content
				   ,hitCount, n.created,  n.saveFilename, n.originalFilename
		FROM club_notice n JOIN memberinfo m ON n.userIdx=m.userIdx
		WHERE m.userIdx = #{userIdx}
	</select>
    <delete id="deleteNoticeId" parameterType="String">
         DELETE FROM club_notice WHERE userIdx = #{userIdx}
    </delete>
	 -->
	
	

</mapper>